/* A simple server in the internet domain using TCP
   The port number is passed as an argument 
   This version runs forever, forking off a separate 
   process for each connection

   This responder_server version will read the system
   health and status to the client.
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>

#include <errno.h>
#include <sys/wait.h>

#include <sys/types.h>
#include <sys/stat.h>

#include <signal.h>

int main(int argc, char *argv[])
{
   char s_health_and_status_filename[1024];
   sprintf(s_health_and_status_filename,"test.txt");
   struct stat sb;
   FILE* p_health_and_status;

   /* if file open or status (I love C) */
   if ( ((p_health_and_status = fopen(s_health_and_status_filename,'r')) == NULL) || fstat(fileno(p_health_and_status), &sb) )
   {
   } else {
      /* fread(p_health_and_status); */
      reverse(p_health_and_status, s_health_and_status_filename, RLINES, 10, &sb)
      (void)fflush(stdout);
   }
}

